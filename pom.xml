<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>
    <name>Mojave: JSON Schema Tools</name>

    <groupId>org.rcsb</groupId>
    <artifactId>rcsb-mojave-tools</artifactId>
    <version>1.2.1</version>

    <properties>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.targetEncoding>UTF-8</project.build.targetEncoding>

        <!-- Configure package name for automatically generated models -->
        <uniprot.auto.package>org.rcsb.uniprot.auto</uniprot.auto.package>
        <ncbi.auto.package>org.rcsb.ncbi.auto</ncbi.auto.package>
        <mesh.auto.package>org.rcsb.mesh.auto</mesh.auto.package>

        <!-- DEPENDENCY VERSIONS -->

        <jdk.version>1.8</jdk.version>
        <junit.version>4.12</junit.version>
        <slf4j.version>1.7.25</slf4j.version>
        <log4j.version>2.9.1</log4j.version>

        <jackson.version>2.10.0</jackson.version>
        <swagger.version>2.0.5</swagger.version>

        <jsonschema2pojo.version>0.5.1</jsonschema2pojo.version>
        <pojo2jsonschema.version>1.14</pojo2jsonschema.version>
        <bean.validation.api.version>2.0.1.Final</bean.validation.api.version>

        <!-- SOURCES OF SCHEMAS FOR EXTERNAL DATA -->

        <!-- uniprot -->
        <uniprot.xsd.schema.source.url>https://www.uniprot.org/docs</uniprot.xsd.schema.source.url>
        <uniprot.xsd.schema.name>uniprot.xsd</uniprot.xsd.schema.name>

        <!-- NCBI esummary.fcgi xsd schema location -->
        <ncbi.xsd.esummary.schema.file>src/main/resources/xsd-schemas/ncbi-esummary.xsd</ncbi.xsd.esummary.schema.file>
        <ncbi.xsd.efetch.schema.file>src/main/resources/xsd-schemas/ncbi-efetch.xsd</ncbi.xsd.efetch.schema.file>

        <!-- where we store downloaded XSD schema for uniprot -->
        <uniprot.xsd.schema.download.location>generated-sources/xsd/uniprot</uniprot.xsd.schema.download.location>

        <!-- where we store auto generated classes from XSD schema for uniprot -->
        <uniprot.auto.gen.classes.location>generated-sources/xjc/uniprot</uniprot.auto.gen.classes.location>
        <!-- where we store auto generated classes from XSD schema for NCBI esummary.fcgi -->
        <ncbi.auto.gen.classes.location>generated-sources/xjc/ncbi</ncbi.auto.gen.classes.location>
        <!-- where we store auto generated classes from DTD schema for MeSH terminology -->
        <mesh.auto.gen.classes.location>generated-sources/xjc/mesh</mesh.auto.gen.classes.location>

    </properties>

    <distributionManagement>
        <downloadUrl>http://nexus3.rcsb.org/repository/rcsb-super-proxy/</downloadUrl>
        <repository>
            <id>releases</id>
            <name>RCSB PDB Maven Repository</name>
            <url>http://nexus3.rcsb.org/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>snapshots</id>
            <url>http://nexus3.rcsb.org/repository/maven-snapshots/</url>
            <uniqueVersion>false</uniqueVersion>
        </snapshotRepository>
    </distributionManagement>

    <!-- Maven will use the information embedded in the scm configuration to determine the command
        mapping for the scm command. -->
    <scm>
        <url>https://github.com/rcsb/rcsb-mojave-tools</url>
        <connection>scm:git:git://github.com/rcsb/rcsb-mojave-tools.git</connection>
    </scm>

    <dependencies>

        <!-- Used by jsonschema2pojo -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!-- Used by jsonschema2pojo -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!-- Used by jsonschema2pojo -->
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>

        <!-- Since java 11 JRE, this is needed at runtime (not in JRE anymore) -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.1</version>
        </dependency>

        <!-- Tool to generate DTO style Java classes from JSON schema -->
        <dependency>
            <groupId>org.jsonschema2pojo</groupId>
            <artifactId>jsonschema2pojo-core</artifactId>
            <version>${jsonschema2pojo.version}</version>
        </dependency>

        <!-- Tool to generate JSON schema from Java classes -->
        <dependency>
            <groupId>com.github.reinert</groupId>
            <artifactId>jjschema</artifactId>
            <version>${pojo2jsonschema.version}</version>
        </dependency>

        <!-- API annotations -->
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger.version}</version>
        </dependency>

        <!-- The validation api v2. Used to decorate generated POJOs so that annotations like @NotNull
            work well with graphql-spqr. See TestGraphQLSchemaGenMojave in rcsb-yosemite -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>${bean.validation.api.version}</version>
        </dependency>

        <!-- API for Log4J -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <!-- Binding for Log4J -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Log4j API and Core implementation required for binding -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Testing dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <profiles>
        <profile>
            <id>sonar</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!-- Optional URL to server. Default value is http://localhost:9000 -->
                <sonar.host.url>
                    http://sonarqube.rcsb.org
                </sonar.host.url>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin -->
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>3.2</version>
            </plugin>

            <!-- Write project properties file at build time -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>write-project-properties</goal>
                        </goals>
                        <configuration>
                            <outputFile>${basedir}/src/main/resources/tools.module.properties</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Downloads files in part of maven build -->
            <plugin>

                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <version>1.3.0</version>

                <configuration>
                    <!-- plugin is caching the downloaded file, getting it from .m2 folder. When skipping cache
                            the file will be downloaded every time maven runs (needed because the file may change) -->
                    <skipCache>true</skipCache>
                </configuration>

                <executions>

                    <!-- UniProt KB -->
                    <execution>
                        <!-- the wget goal actually binds itself to this phase by default -->
                        <phase>initialize</phase>
                        <id>download-uniprot-schema</id>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>${uniprot.xsd.schema.source.url}/${uniprot.xsd.schema.name}</url>
                            <outputFileName>${uniprot.xsd.schema.name}</outputFileName>
                            <outputDirectory>${project.build.directory}/${uniprot.xsd.schema.download.location}</outputDirectory>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <!-- Build Java classes from schema files (XSD, DTD) using XJC tool -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxb2-maven-plugin</artifactId>
                <version>2.5.0</version>
                <executions>

                    <!-- UNIPROT KB -->
                    <execution>
                        <id>uniprot-schema-generate</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/${uniprot.auto.gen.classes.location}</outputDirectory>
                            <packageName>${uniprot.auto.package}</packageName>
                            <extension>true</extension>
                            <sources>
                                <source>${project.build.directory}/${uniprot.xsd.schema.download.location}/${uniprot.xsd.schema.name}</source>
                            </sources>
                            <xjbSources>
                                <xjbSource>src/main/resources/jaxb-bindings/uniprot.xjb</xjbSource>
                            </xjbSources>
                        </configuration>
                    </execution>

                    <!-- NCBI esummary.fcgi -->
                    <execution>
                        <id>ncbi-schema-generate</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/${ncbi.auto.gen.classes.location}</outputDirectory>
                            <packageName>${ncbi.auto.package}</packageName>
                            <extension>true</extension>
                            <sources>
                                <source>${ncbi.xsd.esummary.schema.file}</source>
                                <source>${ncbi.xsd.efetch.schema.file}</source>
                            </sources>
                        </configuration>
                    </execution>

                    <!-- MeSH Descriptor Record -->
                    <execution>
                        <id>mesh-schema-generate</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/${mesh.auto.gen.classes.location}</outputDirectory>
                            <packageName>${mesh.auto.package}</packageName>
                            <externalEntityProcessing>true</externalEntityProcessing>
                            <!-- Indicate that we should use DTD input instead of XSDs -->
                            <sourceType>dtd</sourceType>
                            <!-- Define the directory where we should find the DTD file -->
                            <sources>
                                <source>src/main/resources/dtd-mesh</source>
                            </sources>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

        </plugins>
    </build>

</project>
