package org.rcsb.mojave.tools.jsonschema2pojo.rules;

import com.sun.codemodel.JClassContainer;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JDocCommentable;
import com.sun.codemodel.JType;
import com.sun.codemodel.JPackage;
import org.jsonschema2pojo.Annotator;
import org.jsonschema2pojo.GenerationConfig;
import org.jsonschema2pojo.SchemaStore;
import org.jsonschema2pojo.rules.Rule;
import org.jsonschema2pojo.rules.RuleFactory;
import org.jsonschema2pojo.util.ParcelableHelper;
import org.jsonschema2pojo.util.ReflectionHelper;

/**
 * Instance of a Custom Rule Factory used for code generation with jsonshema2pojo tool. When used in Maven plugin
 * a fully qualified class name, referring to this instance, should be passed with <customRuleFactory> attribute
 *
 * See <a href="http://joelittlejohn.github.io/jsonschema2pojo/site/0.5.1/generate-mojo.html#customRuleFactory">org.rcsb.mojave.tools.jsonschema2pojo documentation</a>.
 *
 * @author Yana Valasatava
 * @since 1.0.0
 */
public class CustomRuleFactory extends RuleFactory {

    /**
     * Create a new rule factory with the given generation config options.
     *
     * @param generationConfig
     *            The generation config options for type generation. These
     *            config options will influence the java code generated by rules
     *            created by this factory.
     * @param annotator
     *            the annotator used to mark up Java types with any annotations
     *            that are required to build JSON compatible types
     * @param schemaStore
     *            the object used by this factory to get and store schemas
     */
    public CustomRuleFactory(GenerationConfig generationConfig, Annotator annotator, SchemaStore schemaStore) {
        super(generationConfig, annotator, schemaStore);
    }

    public CustomRuleFactory() {
        super();
    }

    @Override
    public Rule<JDocCommentable, JDocCommentable> getRequiredRule() {
        return new CustomRequiredRule(this);
    }

    @Override
    public Rule<JDefinedClass, JDefinedClass> getRequiredArrayRule() {
        return new CustomRequiredArrayRule(this);
    }

    @Override
    public Rule<JPackage, JType> getObjectRule() {
        return new CustomObjectRule(this, new ParcelableHelper(), new ReflectionHelper(this));
    }

    @Override
    public Rule<JClassContainer, JType> getEnumRule() {
        return new CustomEnumRule(this);
    }
}